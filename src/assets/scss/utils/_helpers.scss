@use "sass:list";
@use "sass:string";
@use "sass:math";

/// Replaces characters in a string
///
/// @param {string} $string
///   String where the replace happens
/// @param {string} $search
///   Portion of string to find and replace
/// @param {string} $replace
///   Replacement. Default is ''.
/// @return {string} string with characters replaced.
@function str-replace($string, $search, $replace: "") {
  $index: string.index($string, $search);

  @return if(
    $index,
    str-slice($string, 1, $index - 1) + $replace +
      str-replace(
        str-slice($string, $index + str-length($search)),
        $search,
        $replace
      ),
    $string
  );
}

/// Encodes an inline svg. Original source code: http://codepen.io/jakob-e/pen/doMoML
///
/// @param {string} $svg
///   Inline svg to encode
/// @return {string} encoded svg.
@function svg-encode($svg) {
  // Chunk up string in order to avoid "stack level too deep" error
  $encoded: "";
  $slice: 2000;
  $index: 0;
  $loops: math.ceil(divide(string.length($svg), $slice));

  @for $i from 1 through $loops {
    $chunk: string.slice($svg, $index, $index + $slice - 1);
    // Encode
    $chunk: str-replace($chunk, '"', "'");
    $chunk: str-replace($chunk, "%", "%25");
    $chunk: str-replace($chunk, "#", "%23");
    $chunk: str-replace($chunk, "{", "%7B");
    $chunk: str-replace($chunk, "}", "%7D");
    $chunk: str-replace($chunk, "<", "%3C");
    $chunk: str-replace($chunk, ">", "%3E");

    $encoded: #{$encoded}#{$chunk};
    $index: $index + $slice;
  }

  @return "data:image/svg+xml,#{$encoded}";
}

/// Appends a list of variables to $whitelist and return a new whitelist.
///
/// @param {...} $variables
///   Variables to whitelist
/// @return {list} new whitelist.
///
/// Example (in components/_radio.scss)
/// $whitelist: add-to-whitelist('radio-active-background-color','radio-focus-sibiling-box-shadow');
@function add-to-whitelist($variables...) {
  @return list.join($whitelist, $variables);
}

/// Checks if a variable is in $whitelist.
///
/// @param {string} $variable
///   Variable to check if present in whitelist
/// @return {boolean} true if $variable is in $whitelist, else false.
@function is-in-whitelist($variable) {
  @return list.index($whitelist, $variable) != null;
}

/// Checks if $whitelist is empty
///
/// @return {boolean} true if $whitelist is empty, else false.
@function is-empty-whitelist() {
  @return list.length($whitelist) == 0;
}

@mixin unselectable {
  -webkit-touch-callout: none;
  -webkit-user-select: none;
  -moz-user-select: none;
  -ms-user-select: none;
  user-select: none;
}
@mixin side-flex-gap($gap) {
  //flex-wrap: wrap;
  margin-left: -$gap;
  margin-right: -$gap;

  & > * {
    margin-left: $gap;
    margin-right: $gap;
  }
}

// Custom divide function by @mdo from https://github.com/twbs/bootstrap/pull/34245
// Replaces old slash division deprecated in Dart Sass
@function divide($dividend, $divisor, $precision: 10) {
  $sign: if($dividend > 0 and $divisor > 0, 1, -1);
  $dividend: math.abs($dividend);
  $divisor: math.abs($divisor);
  $quotient: 0;
  $remainder: $dividend;
  @if $dividend == 0 {
    @return 0;
  }
  @if $divisor == 0 {
    @error "Cannot divide by 0";
  }
  @if $divisor == 1 {
    @return $dividend;
  }

  @while $remainder >= $divisor {
    $quotient: $quotient + 1;
    $remainder: $remainder - $divisor;
  }
  @if $remainder > 0 and $precision > 0 {
    $remainder: divide($remainder * 10, $divisor, $precision - 1) * 0.1;
  }

  @return ($quotient + $remainder) * $sign;
}
